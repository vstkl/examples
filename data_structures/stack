	.section	__TEXT,__text,regular,pure_instructions
	.macosx_version_min 10, 13
	.globl	_print_stack            ## -- Begin function print_stack
	.p2align	4, 0x90
_print_stack:                           ## @print_stack
	.cfi_startproc
## BB#0:
	pushq	%rbp
Lcfi0:
	.cfi_def_cfa_offset 16
Lcfi1:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Lcfi2:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
Lcfi3:
	.cfi_offset %rbx, -48
Lcfi4:
	.cfi_offset %r12, -40
Lcfi5:
	.cfi_offset %r14, -32
Lcfi6:
	.cfi_offset %r15, -24
	movq	%rdi, %r14
	leaq	L_str(%rip), %rdi
	callq	_puts
	movslq	(%r14), %rbx
	testq	%rbx, %rbx
	js	LBB0_6
## BB#1:
	leaq	L_.str.1(%rip), %r15
	leaq	L_.str.2(%rip), %r12
	.p2align	4, 0x90
LBB0_2:                                 ## =>This Inner Loop Header: Depth=1
	movslq	4(%r14), %rax
	cmpq	%rax, %rbx
	jle	LBB0_4
## BB#3:                                ##   in Loop: Header=BB0_2 Depth=1
	xorl	%eax, %eax
	movq	%r15, %rdi
	movl	%ebx, %esi
	callq	_printf
	jmp	LBB0_5
	.p2align	4, 0x90
LBB0_4:                                 ##   in Loop: Header=BB0_2 Depth=1
	movq	8(%r14), %rax
	movl	(%rax,%rbx,4), %esi
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	%ebx, %edx
	callq	_printf
LBB0_5:                                 ##   in Loop: Header=BB0_2 Depth=1
	testq	%rbx, %rbx
	leaq	-1(%rbx), %rbx
	jg	LBB0_2
LBB0_6:
	leaq	L_str.5(%rip), %rdi
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_puts                   ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.globl	_push                   ## -- Begin function push
	.p2align	4, 0x90
_push:                                  ## @push
	.cfi_startproc
## BB#0:
	movl	4(%rdi), %eax
	leal	1(%rax), %ecx
	movl	%ecx, 4(%rdi)
	cmpl	(%rdi), %eax
	jle	LBB1_2
## BB#1:
	pushq	%rbp
Lcfi7:
	.cfi_def_cfa_offset 16
Lcfi8:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Lcfi9:
	.cfi_def_cfa_register %rbp
	leaq	L_str.6(%rip), %rdi
	callq	_puts
	movl	$1, %eax
	popq	%rbp
	retq
LBB1_2:
	movq	16(%rdi), %rax
	leaq	4(%rax), %rcx
	movq	%rcx, 16(%rdi)
	movl	%esi, (%rax)
	xorl	%eax, %eax
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_pop                    ## -- Begin function pop
	.p2align	4, 0x90
_pop:                                   ## @pop
	.cfi_startproc
## BB#0:
	pushq	%rbp
Lcfi10:
	.cfi_def_cfa_offset 16
Lcfi11:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Lcfi12:
	.cfi_def_cfa_register %rbp
	movl	4(%rdi), %eax
	leal	-1(%rax), %ecx
	movl	%ecx, 4(%rdi)
	testl	%eax, %eax
	jle	LBB2_1
## BB#2:
	addq	$-4, 16(%rdi)
	xorl	%eax, %eax
	popq	%rbp
	retq
LBB2_1:
	movl	$1, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4               ## -- Begin function main
LCPI3_0:
	.long	0                       ## 0x0
	.long	1                       ## 0x1
	.long	2                       ## 0x2
	.long	3                       ## 0x3
LCPI3_1:
	.long	4                       ## 0x4
	.long	5                       ## 0x5
	.long	6                       ## 0x6
	.long	7                       ## 0x7
LCPI3_2:
	.long	8                       ## 0x8
	.long	9                       ## 0x9
	.long	10                      ## 0xa
	.long	11                      ## 0xb
LCPI3_3:
	.long	12                      ## 0xc
	.long	13                      ## 0xd
	.long	14                      ## 0xe
	.long	15                      ## 0xf
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_main
	.p2align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## BB#0:
	pushq	%rbp
Lcfi13:
	.cfi_def_cfa_offset 16
Lcfi14:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Lcfi15:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
Lcfi16:
	.cfi_offset %rbx, -48
Lcfi17:
	.cfi_offset %r12, -40
Lcfi18:
	.cfi_offset %r14, -32
Lcfi19:
	.cfi_offset %r15, -24
	movl	$60, %edi
	callq	_malloc
	movq	%rax, %r14
	movaps	LCPI3_0(%rip), %xmm0    ## xmm0 = [0,1,2,3]
	movups	%xmm0, (%r14)
	movaps	LCPI3_1(%rip), %xmm0    ## xmm0 = [4,5,6,7]
	movups	%xmm0, 16(%r14)
	movaps	LCPI3_2(%rip), %xmm0    ## xmm0 = [8,9,10,11]
	movups	%xmm0, 32(%r14)
	movaps	LCPI3_3(%rip), %xmm0    ## xmm0 = [12,13,14,15]
	movups	%xmm0, 48(%r14)
	leaq	L_str.6(%rip), %rdi
	callq	_puts
	leaq	L_str(%rip), %rdi
	callq	_puts
	movl	$15, %ebx
	leaq	L_.str.1(%rip), %r15
	leaq	L_.str.2(%rip), %r12
	.p2align	4, 0x90
LBB3_1:                                 ## =>This Inner Loop Header: Depth=1
	cmpq	$18, %rbx
	jl	LBB3_3
## BB#2:                                ##   in Loop: Header=BB3_1 Depth=1
	xorl	%eax, %eax
	movq	%r15, %rdi
	movl	%ebx, %esi
	callq	_printf
	jmp	LBB3_4
	.p2align	4, 0x90
LBB3_3:                                 ##   in Loop: Header=BB3_1 Depth=1
	movl	(%r14,%rbx,4), %esi
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	%ebx, %edx
	callq	_printf
LBB3_4:                                 ##   in Loop: Header=BB3_1 Depth=1
	decq	%rbx
	cmpq	$-1, %rbx
	jne	LBB3_1
## BB#5:
	leaq	L_str.5(%rip), %rdi
	callq	_puts
	leaq	L_str(%rip), %rdi
	callq	_puts
	movl	$15, %ebx
	leaq	L_.str.1(%rip), %r15
	leaq	L_.str.2(%rip), %r12
	.p2align	4, 0x90
LBB3_6:                                 ## =>This Inner Loop Header: Depth=1
	cmpq	$8, %rbx
	jl	LBB3_8
## BB#7:                                ##   in Loop: Header=BB3_6 Depth=1
	xorl	%eax, %eax
	movq	%r15, %rdi
	movl	%ebx, %esi
	callq	_printf
	jmp	LBB3_9
	.p2align	4, 0x90
LBB3_8:                                 ##   in Loop: Header=BB3_6 Depth=1
	movl	(%r14,%rbx,4), %esi
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	%ebx, %edx
	callq	_printf
LBB3_9:                                 ##   in Loop: Header=BB3_6 Depth=1
	decq	%rbx
	cmpq	$-1, %rbx
	jne	LBB3_6
## BB#10:
	leaq	L_str.5(%rip), %rdi
	callq	_puts
	xorl	%eax, %eax
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__cstring,cstring_literals
L_.str.1:                               ## @.str.1
	.asciz	"/:%d\n"

L_.str.2:                               ## @.str.2
	.asciz	"%d:%d\n"

L_str:                                  ## @str
	.asciz	"stack:"

L_str.5:                                ## @str.5
	.asciz	"____"

L_str.6:                                ## @str.6
	.asciz	"stack overflow"


.subsections_via_symbols
